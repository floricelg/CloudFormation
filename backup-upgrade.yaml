AWSTemplateFormatVersion: 2010-09-09
Description: >-
Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups:     

      - Label: 
          default: "Instances configuration"
        Parameters:
          - AmiId1     
          - AnsibleAmiId


      - Label:
          default: "Which Subnet do you intend to use to connect to virtual machines via SSH"
        Parameters:
          - SSHLocation
Parameters:

  AnsibleAmiId:
    Description: AMI ID to be used for MClaw Ansible
    Type: 'AWS::EC2::Image::Id'
    Default: ami-0010d735xxxxxxx
    ConstraintDescription: must be the name of an existing AMI ID        
  
  ProbeType:
    Description: EC2
    Type: String
    Default: c5.2xlarge
    AllowedValues:
      - t2.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - c5.2xlarge
    ConstraintDescription: must be a valid EC2 instance type.
    
  AmiId1:
    Description: AMI ID to be use
    Type: 'AWS::EC2::Image::Id'
    Default: ami-0f34xxxxxxxxx
    ConstraintDescription: must be the name of an existing AMI ID



## Parameters defines which parameters will be introduced during CloudFormation stack deploy   
Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 100.31.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-VPC'
  
  # Route tables ---
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Description: A route table that has a route to the Internet
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PublicRouteTable'

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'

  InternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Description: Internet gateway attachement to the VPC
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc

  InternetRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: InternetGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Description: A route table that does not have a route to the Internet
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrivateRouteTable'

  # Subnets ---
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
          - 0
          - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: 100.31.0.0/24
      MapPublicIpOnLaunch: 'true'
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PublicSubnet1'

  PublicSubnet1RouteTblAscn:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1


  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
          - 0
          - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: 100.31.10.0/24
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrivateSubnet2'

  PrivateSubnet2RouteTblAscn:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

  # Security groups ---
  CICDSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref Vpc
      GroupDescription: 'Security group for web server instances'
      SecurityGroupIngress:
        - 
          CidrIp: 0.0.0.0/0
          FromPort: 22
          ToPort: 22
          IpProtocol: tcp
        - 
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - 
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0  
        -    
          IpProtocol: tcp
          FromPort: '1024'
          ToPort: '65535'
          CidrIp: 100.31.0.0/16
      
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-WebServerSG'

  AnsibleServer:
    Type: 'AWS::EC2::Instance'
    DependsOn: CICDcsBackup
    Properties:
      ImageId: !Ref AnsibleAmiId
      InstanceType: t2.large
      Tags:
        - Key: Name
          Value: !Join
                 - ''
                 - - 'Ansible '
                   - !Ref 'AWS::StackName'
      NetworkInterfaces:
        - GroupSet:
            - !Ref CICDSecurityGroup
          DeviceIndex: '0'
          AssociatePublicIpAddress: 'true'
          PrivateIpAddress: 100.31.0.201 
          DeleteOnTermination: 'true'
          SubnetId: !Ref PublicSubnet1
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: gp2
            VolumeSize: '150'
            DeleteOnTermination: 'true'
      UserData:
  

  MClawProbe1:
    Type: 'AWS::EC2::Instance'
    DependsOn: InternetGateway
    Properties:
      ImageId: !Ref ProbeAmiId1
      InstanceType: !Ref ProbeType
      Tags:
        - Key: Name
          Value: !Join
                 - ''
                 - - 'Probe1 '
                   - !Ref 'AWS::StackName'
      NetworkInterfaces:
        - GroupSet:
            - !Ref CICDSecurityGroup
            
          AssociatePublicIpAddress: 'false'
          DeviceIndex: '0'
          PrivateIpAddress: 100.31.0.26
          DeleteOnTermination: 'true'
          SubnetId: !Ref PublicSubnet1
        - GroupSet:
            - !Ref CICDSecurityGroup
          AssociatePublicIpAddress: 'false'
          DeviceIndex: '1'
          PrivateIpAddress: 100.31.10.26
          DeleteOnTermination: 'true'
          SubnetId: !Ref PrivateSubnet2
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: gp2
            VolumeSize: '500'
            DeleteOnTermination: 'true'      



Outputs:
  VpcId:
    Value: !Ref Vpc
    
  PublicSubnets:
    Description: 'Public subnet IDs as comma-delimited' 
    Value: 
      Fn::Join:
        - ','
        - 
          - !Ref PublicSubnet1

  PrivateSubnets:
    Description: 'Private subnet IDs as comma-delimited'
    Value: !Join
      - ','
      - 
        - !Ref PrivateSubnet2
  
  CICDSecurityGroup:
    Description: ID of the web security group
    Value: !Ref CICDSecurityGroup
